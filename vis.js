var vis = function(data) {	console.log('data', data);    var data = (function() {    	data.nodes = {}    	// ?renames    	data.links.forEach(function(link) {    		link.source = link.Potential_Buyer;    		link.target = link.Target;    	})    	console.log(d3.extent(data.links.map(function(d) { return +d.bid})))    	data.links.forEach(function(link) {    		link.source = data.nodes[link.source] ||     			(data.nodes[link.source] = {name: link.source, value: +link.bid})    		link.target = data.nodes[link.target] ||     			(data.nodes[link.target] = {name: link.target, value: +link.bid})    		link.value = +link.bid;    	})    	    	return data    })();   	var sizeScale = function(d) {   		return 5 * (Math.log(d) - 15);   	}    console.log('data.nodes', data.nodes)    console.log('data.links', data.links)    var ForceNodes = (function() {    	var width = 960;    	var height = 500;    	var ForceNodes = {};    	var force = d3.layout.force()    		.size([width, height])    		.linkDistance(200)    		.charge(30)    		 .friction(0.8)    		;    	var svg = d3.select('.chart-area')    		.select('svg.chart')    		.attr('width', width)    		.attr('height', height);    	ForceNodes.plot = function() {    		force.nodes(d3.values(data.nodes))    			.links(data.links)    			.start();    		    		svg.append('svg:defs').selectAll('marker')    			.data(['end'])    			.enter().append('svg:marker')    			.attr('id', String)    			.attr('viewBox', "0 -5 10 10")    			.attr('refX', 15)    			.attr('refY', -1.5)    			.attr('markerWidth', 6)    			.attr('markerHeight', 6)    			.attr('orient', 'auto')    			.append('svg:path')    			.attr('d', 'M0,-5L10,0L0,5');    		var path = svg.append('svg:g')	    			.selectAll('path')    			.data(force.links())    			.enter().append('svg:path')    				.attr('class', 'link')    				.attr('marker-end', "url(#end)")    				.classed('success', function(d) {    					return d.Success === 'Yes'    				});    		    		var node = svg.selectAll('.node')    			.data(force.nodes())    			.enter().append('g')    			.attr('class', 'node')    			.call(force.drag);    		node.append('circle')    			.attr('r', function(d) {    				console.log(d)    				    				return sizeScale(d.value)    			})    			.attr('class', 'circle');    		 force.on("tick", function() {    		 	path.attr('d', function(d) {		 					 			var dx = d.target.x - d.source.x,    		 			dy = d.target.y - d.source.y,    		 			dr = Math.sqrt(dx * dx + dy * dy);    		 		// return 'M' + d.source.x + ',' + d.source.y + 'A' +    		 		// 	dr + ',' + dr + " 0 0,1 " + d.target.x + "," + d.target.y;    		 		return 'M' + d.source.x + ',' + d.source.y +     		 			   'L' + d.target.x + "," + d.target.y;    		 		// if (d.Success === 'Yes') {}    		 			    		 		    		 	})			    node.attr('transform', function(d) {			    	return 'translate(' + d.x + ',' + d.y + ')';			    })			    				  });    	}    	    	return ForceNodes;    })();    ForceNodes.plot()};d3.csv('data/BidDataforD3.csv', function(links) {	d3.select('#loading')		.transition()		.duration(1000)		.style('opacity', 0)		.remove();	vis({		links: links	});});